#---------------------------
# Knapsack Optimization
#---------------------------
install.packages("lpSolveAPI")
install.packages("ggplot2")
install.packages("reshape")
install.packages("gridExtra")

library(lpSolveAPI)
library(ggplot2)
library(reshape)
library(gridExtra)

# Define datasets
train<-data.frame(wagon=c('w1','w2','w3'), weightcapacity=c(10,8,12), spacecapacity=c(5000,4000,8000))
cargo<-data.frame(type=c('c1','c2','c3','c4'), available=c(18,10,5,20), volume=c(400,300,200,500),profit=c(2000,2500,5000,3500))

# Create an LP model
lpmodel<-make.lp(2*nrow(train)+nrow(cargo),12)
lpmodel<-make.lp(nrow(train)+nrow(cargo),12)

# Build the model
column<-0
row<-0
for(wg in train$wagon){
    row<-row+1
    for(type in seq(1,NROW(cargo$type))){
    column<-column+1
    set.column(lpmodel,column,c(1, cargo[type,'volume'],1), indices=c(row,NROW(train)+row, NROW(train)*2+type))
    }}
 
# Set constraints
set.constr.value(lpmodel, rhs=train$weightcapacity, constraints=seq(1,NROW(train)))
set.constr.value(lpmodel, rhs=train$spacecapacity, constraints=seq(NROW(train)+1,NROW(train)*2))
set.constr.value(lpmodel, rhs=cargo$available, constraints=seq(NROW(train)*2+1,NROW(train)*2+NROW(cargo)))
 
# Set objective (which variable to minimize or maximize)
set.objfn(lpmodel, rep(cargo$profit,NROW(train)))

# Set objective function direction (whether to minimize or maximize)
lp.control(lpmodel,sense='max')

# Solve the model (if this return 0 an optimal solution is found)
solve(lpmodel)
 
# Return the proposed solution
get.objective(lpmodel)
get.variables(lpmodel)
get.constraints(lpmodel)
